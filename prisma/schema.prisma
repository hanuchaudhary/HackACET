// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  posts         Post[]
}

model Account {
  id                  String   @id @default(uuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  access_token        String?  @db.Text
  access_token_secret String?  @db.Text
  refresh_token       String?  @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.Text
  session_state       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum STATUS {
  IDLE
  PENDING
  PUBLISHED
  QUEUED
  FAILED
}

model Post {
  id          String    @id @default(uuid())
  text        String
  imageUrls    String?
  providerId  String?
  provider    String?
  isScheduled Boolean   @default(false)
  status      STATUS    @default(IDLE) // draft, published, scheduled
  scheduledAt DateTime?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
